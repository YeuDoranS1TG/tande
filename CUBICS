#include <bits/stdc++.h>
using namespace std;
#define maxN 100005
int n;
long long k,a[maxN];
int main()
{
    //freopen("CUBICS.INP","r",stdin);
    //freopen("CUBICS.OUT","w",stdout);
    cin>>n>>k;
    for (int i=0;i<n;++i){
        cin>>a[i];
    }
    vector<pair<long long,long long>>v(n);
    long long prefixsum=0;
    for (int i=0;i<n;++i){
        prefixsum+=a[i]-k;
        v[i].first=prefixsum;
        v[i].second=i;
    }
    sort(v.begin(),v.end());
    long long maxval=0,resi;
    for (int i=0;i<n-1;++i){
        int j=i+1;
        while (j<n && v[i].first==v[j].first){
            ++j;
        } --j;
        if (v[i].first==v[j].first){
            if (v[j].second-v[i].second>maxval){
                maxval=v[j].second-v[i].second;
                resi=v[i].second;
            }
        }
    }
    if (maxval==0) cout<<0;
    else cout<<maxval<<" "<<resi+2;
    return 0;
}
/*
KHỐI LẬP PHƯƠNG  
Quà sinh nhật của Tí là một bộ xếp hình Lego. Tí xếp thành 𝑛 tháp, tháp thứ 𝑖 có độ cao là 𝑎𝑖.  
Tí rất có cảm tình với số nguyên 𝑘, vì vậy dãy liên tục các tháp được coi là hài hòa nếu chúng có độ cao 
trung bình là 𝑘. 
Yêu cầu: Cho 𝑛, 𝑘 và dãy 𝑎1, 𝑎2, … , 𝑎𝑛. Hãy xác định dãy tháp hài hòa dài nhất, chỉ ra tháp đầu tiên và độ 
dài của dãy tìm được. Nếu tồn tại nhiều dãy cùng độ dài thì chỉ ra dãy tháp có vị trí đầu nhỏ nhất. Nếu không 
tồn tại dãy tháp thì đưa ra một số 0.  
Dữ liệu: Vào từ tập tin văn bản CUBICS.INP  - - 
Dòng đầu tiên chứa 2 số nguyên 𝑛 và 𝑘(1 ≤ 𝑛 ≤ 105; 1 ≤ 𝑘 ≤ 109),  
Dòng thứ hai chứa dãy gồm 𝑛 số nguyên 𝑎1, 𝑎2, … , 𝑎𝑛(1 ≤ 𝑎𝑖 ≤ 109).  
Kết quả: Ghi ra tập tin văn bản CUBICS.OUT trên một dòng gồm 2 số nguyên: độ dài của dãy tìm được 
và số thứ tự của tháp đầu tiên hoặc một số 0 nếu không tồn tại dãy.  
Ví dụ: 
CUBICS.INP 
5 3  
1 2 3 4 6  
CUBICS.OUT
3 2 
*/
